NODE.JS
We already know JS, so Node.js is a good choice. It's scalable, and popular. A
bunch of large companies use it. Been growing really fast since 2011.

Node.js allows our JavaScript to break beyond the browser. Maybe to access the
file system on the clients computer, etc. You need to write code that interacts
directly with the hardware of the client computer. We can create a desktop
application, etc.

We can also use Node.js to run JavaScript code on someone else's computer, i.e.
a remote server, opposed to our own computer or the client's computer.

You can run JavaScript files directly from the terminal by typing `node` and
then the name of the file. Then, it'll execute your file and give you output
within the terminal.


REPL
Read, Evaluation, Print, Loop

Allows you to live execute JS code from the terminal. Like the above, except not
whole files, just snippets of live code. When we install node, we also
install node REPL. To access it we type just `node` into the terminal. Then we'll
see an angle bracket, which is how we'll know that we're inside the REPL.

Here, we can write JS code directly and get the output. To exit the REPL, we
type either `.exit` or we do CTRL + C twice. To clear your console you just
type `clear`.


SUMMARY
So, to summarise, you can do either just `node` or `node file_name.js`. If you include
a filename then it'll run the file and return output in the terminal. If you
just type node, it'll put you into REPL, which is basically a live terminal for
JS code. To create a new npm, we do `npm init`.


NATIVE NODE MODULES
These are libraries of code that the Node team wrote to help us out. You can see
a list of all the modules on the node.js website API list. There's one called
the File System, which helps us interact with, obviously, the file system. To
use the module, we first have to `require` it. You can use the FileSystem module
to create new files, as shown in the index.js file in Practice Site 8 (Node.js).

`const` is like `var` except it doesn't change. It's a constant.


NPM
This is a package manager for external node modules. Using npm, you can use all
these other packages that other people wrote (outside the native node APIs). To
use, navigate to your desired directory and type:

`npm init`:     Create a project -> give project name, version, description, entry point (main JS file), Author, etc.

Doing this initializes a `package.json` file in your directory. This is a description
of all the npm packages we have so far. As we install external modules, they'll
show up as well. json is a file format that's used to organize data. To install
external packages, within our directory we do:

`npm install  package_name`:      Install external module

Now we'll see that the package name is included in our list of dependencies in
our package.json file. Which means that our project now depends on this module.
Now each of these packages might have their own dependencies which get dragged
into your `node_modules` folder so it's kind of like package inception lol.
To use a package, as mentioned with the file system module, we do:

`var package_name = require('package_name');`:    Use the module
