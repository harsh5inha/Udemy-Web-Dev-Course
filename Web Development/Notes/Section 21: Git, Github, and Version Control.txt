VERSION CONTROL & VIM
Version control is the process of saving checkpoint in your code.

Vim is a text editor that can be used within the terminal. Well actually Vim is
designed for use both from a command-line interface and as a standalone
application in a graphical user interface. Vim allows you to be efficient by
forcing you to only use the keyboard, and then giving you the ability to use
existing keyboard shortcuts as well as customize and create new ones for
completing repetitive tasks quickly. It's available on basically every major
platform: Mac, Windows, Linux. However, there is a high learning curve.

Vim has two modes.
1. Insert mode (Where you can just type like normal text editor. Press i for insert mode)
2. Command mode (Where you give commands to the editor to get things done . Press ESC for command mode)
Most of them below are in command mode

x - to delete the unwanted character
u - to undo the last the command and U to undo the whole line
CTRL-R to redo
A - to append text at the end
:wq - to save and exit
:q! - to trash all changes
dw - move the cursor to the beginning of the word to delete that word
2w - to move the cursor two words forward.
3e - to move the cursor to the end of the third word forward.
0 (zero) to move to the start of the line.
d2w - which deletes 2 words .. number can be changed for deleting the number of consecutive words like d3w
dd - to delete the line and 2dd to delete to line .number can be changed for deleting the number of consecutive words

:wq is a (case-sensitive) combination of keystrokes popular among Linux
programmers that will save the file and then exit the program. Sometimes used
as a way of say "I'm done" or "Finished" after making a statement. You use it
in VIM.

GIT
By default, Git is installed on Linux and macOS computers as a command line
option. However, Microsoft Windows does not include a Git command.

To initialize a Git repo we write `git init`, and it'll initialize an empty Git
repository. You won't be able to see it because it's saved in your directory
(whatever your working directory is) as `.git`, so it's a hidden directory.

Your "staging area" is a place where you can add files so that you can
track changes to them. It's basically an intermediate location where you can
pick and choose which files in your working directory that you want to
eventually commit.

You can use `git status` to see what's currently inside your staging area.
Untracked or modified files will be shown in red. These are files that are inside your
working directory that are not yet in the staging area. To add it to the staging
area, we use the command `git add *filename*`. Files that are green, are those
that have been newly added and are ready to be committed. To add all files in
the directory just do `git add .`

You commit by using the command `git commit -m "Complete Chapter 1"`. The -m is
a flag that allows you to commit a message. These messages are really important.
They help you keep track of the changes you make in each commit, so you want to
be as specific as possible. It's general practice to write your messages in the
present, imperative tense. As if you are giving orders to the codebase to change
its behavior. It's for consistency and so that in a truly distributed and
collaborative project, people will know what applying the commit WILL DO. Not
what WAS DONE. There's some debate about this though, some people prefer past
tense.

You can use `git log` to see what commits have been made, when, and the commit
message.

You can use `git diff *filename*` to see what differences there are between the
current file you're editing and the last committed version of the file. It'll
show you parts that were deleted in red, and parts that were added in green. To
revert back to a previous version of a file you can use `git checkout *filename*`.

So you can create a Git local repository and have a bunch of files that we add
to the staging area and then commit them all at once when we're ready with a
version message about what we actually did. We can continue the process over and
over. If we ever mess up a file or files, we can revert back to previous versions
and start from there.

The `git rebase` command allows you to easily change a series of commits,
modifying the history of your repository. You can reorder, edit, or squash
commits together. Typically, you would use git rebase to edit previous commit
messages, combine multiple commits into one,  or delete or revert commits that
are no longer necessary. But it's considered bad practice to rebase commits when
you've already pushed to a repository.

So:
`git init`:                             Initializes a local Git repository in your working directory
`git status`:                           Examine untracked or modified files not in your staging area, or new files which were just added
`git add *filename*`:                   Add files to your staging area
`git add .`:                            Add all files in directory to staging area
`git rm --cached -r .`:                 Remove all files from the staging area
`git commit -m "message"`:              Commit files to repository with commit version message
`git log`:                              Examine what commits have been made
`git diff *filename*`:                  Examine differences between file and most recently committed version
`git checkout *filename*`:              Revert file to previously most recently committed version
`git rebase`:                           This allows you to edit the commit message/info
`git remote add origin *URL of repo*`:  Adds remote repository named origin
`git push -u origin master`:            This pushes your repo to Github

GITHUB
This is a remote repository, stored on the cloud. You have public and private
repositories. You used to have to pay for the private ones. GitHub believes that
you should have (almost) everything in a public repo. They say to only keep
business critical files in the private repo (files that make money).This is
because they believe that public repos foster collaboration. And you'll be able
to speed up interview processes because you'll already know if someone is good
at a particular skill. Also individuals get to show off how good they are, vs.
a company mandating that code repositories made for work stay private. And
it makes information more accessible etc.

It's interesting because anything client side is pretty much already compromised.
Like you can always just view the HTML, CSS, and JS on a site. Similar thing
with android apps etc. So there isn't a ton of benefit from putting these files
in a private repo to begin with. I'm not 100% sure about this stuff though, so
I'll have to learn more about it later.

To push your repository from your local computer to Github, you create a repo on
Git hub, and then you can do `git remote add origin *URL of repo*`.
You don't have to specify "origin" as the name of the remote repo but it's
standard practice. Then to actually push our repo, we can do `git push -u origin
master`. the `-u` flag links up your repos, the origin is the name of your
remote repo, and master is the name of the branch. The master branch is simply
the main or default branch of all of your commits. People actually do a lot of
story writing on Github, because it's so convenient for saving your different
versions, etc. Github has some visualizations that show branches, and the series
of commits you've pushed. You can also look at the commit messages and the
changes made at each time point.

GITIGNORE
We don't want to upload all files to GitHub. The names of secret files with
passwords, API keys, user settings, etc. need to be included in a .gitignore
file so they aren't pushed to the repo. The .DS_Store file (typically a hidden file)
is a settings file that saves things like how you like to order your files to be
displayed in your folder. We'd usually not want to upload those to the repo
either because they create clutter. So we can create a `.gitignore` file in our
directory (case sensitive). Within that file we write out the full names of the
files we'd rather not have pushed to the repo. We can use the `#` symbol to write
comments within the file. We can also make use of the `*` wildcard to specify
files of a certain pattern. All `*.txt` files, for instance.

The github repository on GitHub, that is, the repository that the company GitHub
manages, includes a repository called gitignore. In there you'll find a bunch
of different .gitignore templates. So if you're making something on Swift, you
can search for the Swift Template and copy/paste the contents into your own
gitignore. The templates are just a bunch of different file names and file
extensions for things you wouldn't want uploaded to a public repository. Things
like API keys, user defaults or user settings like `*.pbxuser` etc.

A README file contains information about other files in a directory or archive
of computer software. A form of documentation, it is usually a simple plain text
file called Read Me, READ.ME, README.TXT, README.md (for a text file using
markdown markup), README.1ST  â€“ or simply README.

So there are 3 files to take care of in each directory you create:
- .gitignore
- .DS_Store
- README.md

CLONING
Cloning a repository is taking a repository from Github, and creating a local
version on your machine. On GitHub there's a repository called "open source ios
apps" which is where a bunch of people have put code for open source ios apps.
The command is `git clone *Repository URL*`.

BRANCHING & MERGING
Pretty self-explanatory, we can create branches within version control that we
can manipulate and iterate on, and then eventually we can merge those changes
back into our master branch of the code.

`git branch`:                   Check what branch you're currently on (designated by asterisk *)
`git branch *new branch name*`: Create new branch
`git checkout *branch name*`:   Change to different branch
`git merge *branch to merge*`:  Merge a branch. Include a merge message via Vim (optional) and then type `:q!` to exit.

So if you create and then switch to a different branch, you can edit your files,
and then commit them. Now those changed files will only be visible on the
separate branch, because you haven't merged them yet to your master branch. If
you switch back to your master branch, then your local files will switch back
to display only those which are saved on your master branch.

Side note: w It's important to remember that you have two repositories: your local repo and
your remote repo on GitHub. You can branch and merge and commit etc. on your local,
but those changes won't be stored on the cloud until you push to GitHub. When
you type `git log`, you'll be able to see the latest push that you've made to
your local repository as "(HEAD -> *branch_name*)". This is the latest commit
you've made to your computer's git repo. The latest push you've made to your
remote repository will be in red as "(origin/master)". If you've pushed all the
updates in your local repo to your remote GitHub repo, then both these
statements will be on the same line. (All your work will be saved on the cloud.)

To merge a branch to your master, you have to navigate to your master branch
and then do `git merge *branch_name*`. That'll bring in the other branch. Well
it'll take you to Vim, where you can create an optional commit message if you
want and then type `:q!` to exit. Now the changed files in your other branch will be
brought over and become the files of your master branch.

You can see a graphical representation of all these branches on GitHub once you
push. You can actually do all this branching and editing and merging and all
that on GitHub using the GUI.

A pull request is a request to merge your branches. A push request is to commit
your code onto your repo on GitHub.


FORKING & PULL REQUESTS
There are read and write permissions for your remote repositories. Everyone on
your team will probably have both, so they can clone and then push commits to
the repo etc. That's the point of GitHub, collaborative repositories.

But strangers won't have access. They'll be able to fork your repository. Which
is like cloning except they're not downloading a repo to their local, they're
cloning the repo into their own GitHub account. After forking, they'll be able
to clone it to their local to make changes. Then they can commit their changes
and push it to their GitHub repo. But they won't be able to add their changes
to YOUR repository that they originally forked from. To do that, they have to
file a pull request, asking you to approve their changes and to pull their changes
over to your repo. You can approve or decline their pull requests. Your pull
requests show up under the "pull requests" tab on GitHub. You'll be able to review
the request message and the changes submitted and then provide feedback and
deny or confirm the merge with a merge message.

You can go through other repositories and see the history and current status
of pull requests and contributors etc.
