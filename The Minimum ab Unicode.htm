<!DOCTYPE html>
<!-- saved from url=(0164)https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/ -->
<html lang="en-US"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="profile" href="http://gmpg.org/xfn/11">
<link rel="pingback" href="https://www.joelonsoftware.com/xmlrpc.php">

<title>The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software</title>
<!-- Jetpack Site Verification Tags -->
<link rel="dns-prefetch" href="https://fonts.googleapis.com/">
<link rel="dns-prefetch" href="https://s.w.org/">
<link rel="dns-prefetch" href="https://v0.wordpress.com/">
<link rel="dns-prefetch" href="https://i0.wp.com/">
<link rel="dns-prefetch" href="https://i1.wp.com/">
<link rel="dns-prefetch" href="https://i2.wp.com/">
<link rel="dns-prefetch" href="https://c0.wp.com/">
<link rel="alternate" type="application/rss+xml" title="Joel on Software » Feed" href="https://www.joelonsoftware.com/feed/">
<link rel="alternate" type="application/rss+xml" title="Joel on Software » Comments Feed" href="https://www.joelonsoftware.com/comments/feed/">
		<script type="text/javascript" async="" id="gauges-tracker" data-site-id="57a9715ec88d90063f018386" src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/track.js"></script><script id="twitter-wjs" src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/widgets.js"></script><script async="" src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/analytics.js"></script><script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.0.0\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/13.0.0\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/www.joelonsoftware.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=5.5.1"}};
			!function(e,a,t){var r,n,o,i,p=a.createElement("canvas"),s=p.getContext&&p.getContext("2d");function c(e,t){var a=String.fromCharCode;s.clearRect(0,0,p.width,p.height),s.fillText(a.apply(this,e),0,0);var r=p.toDataURL();return s.clearRect(0,0,p.width,p.height),s.fillText(a.apply(this,t),0,0),r===p.toDataURL()}function l(e){if(!s||!s.fillText)return!1;switch(s.textBaseline="top",s.font="600 32px Arial",e){case"flag":return!c([127987,65039,8205,9895,65039],[127987,65039,8203,9895,65039])&&(!c([55356,56826,55356,56819],[55356,56826,8203,55356,56819])&&!c([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]));case"emoji":return!c([55357,56424,8205,55356,57212],[55357,56424,8203,55356,57212])}return!1}function d(e){var t=a.createElement("script");t.src=e,t.defer=t.type="text/javascript",a.getElementsByTagName("head")[0].appendChild(t)}for(i=Array("flag","emoji"),t.supports={everything:!0,everythingExceptFlag:!0},o=0;o<i.length;o++)t.supports[i[o]]=l(i[o]),t.supports.everything=t.supports.everything&&t.supports[i[o]],"flag"!==i[o]&&(t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&t.supports[i[o]]);t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&!t.supports.flag,t.DOMReady=!1,t.readyCallback=function(){t.DOMReady=!0},t.supports.everything||(n=function(){t.readyCallback()},a.addEventListener?(a.addEventListener("DOMContentLoaded",n,!1),e.addEventListener("load",n,!1)):(e.attachEvent("onload",n),a.attachEvent("onreadystatechange",function(){"complete"===a.readyState&&t.readyCallback()})),(r=t.source||{}).concatemoji?d(r.concatemoji):r.wpemoji&&r.twemoji&&(d(r.twemoji),d(r.wpemoji)))}(window,document,window._wpemojiSettings);
		</script><script src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/wp-emoji-release.min.js" type="text/javascript" defer=""></script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
	<link rel="stylesheet" id="wp-block-library-css" href="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/style.min.css" type="text/css" media="all">
<style id="wp-block-library-inline-css" type="text/css">
.has-text-align-justify{text-align:justify;}
</style>
<link rel="stylesheet" id="editor-style-css" href="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/style.css" type="text/css" media="all">
<link rel="stylesheet" id="editor-font-awesome-css-css" href="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/font-awesome.css" type="text/css" media="screen">
<!--[if IE]>
<link rel='stylesheet' id='ie7-style-css'  href='https://149366100.v2.pressablecdn.com/wp-content/themes/editor-redux/inc/styles/ie.css?ver=1559091807' type='text/css' media='all' />
<![endif]-->
<link rel="stylesheet" id="editor-fonts-css" href="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/css" type="text/css" media="all">
<link rel="stylesheet" id="jetpack_css-css" href="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/jetpack.css" type="text/css" media="all">
<script type="text/javascript" src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/jquery.js" id="jquery-core-js"></script>
<link rel="https://api.w.org/" href="https://www.joelonsoftware.com/wp-json/"><link rel="alternate" type="application/json" href="https://www.joelonsoftware.com/wp-json/wp/v2/posts/911"><link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://www.joelonsoftware.com/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://www.joelonsoftware.com/wp-includes/wlwmanifest.xml"> 
<link rel="prev" title="01" href="https://www.joelonsoftware.com/2003/10/01/01-3/">
<link rel="next" title="10" href="https://www.joelonsoftware.com/2003/10/10/10/">

<link rel="canonical" href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/">
<link rel="shortlink" href="https://wp.me/p83KNI-eH">
<link rel="alternate" type="application/json+oembed" href="https://www.joelonsoftware.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.joelonsoftware.com%2F2003%2F10%2F08%2Fthe-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses%2F">
<link rel="alternate" type="text/xml+oembed" href="https://www.joelonsoftware.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.joelonsoftware.com%2F2003%2F10%2F08%2Fthe-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses%2F&amp;format=xml">
<style type="text/css">img#wpstats{display:none}</style>	<script>
		(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
		(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
		m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
		})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
		ga('create', 'UA-225715-5', 'auto');
		ga('send', 'pageview');
	</script>
	<meta name="description" content="Ever wonder about that mysterious Content-Type tag? You know, the one you&#39;re supposed to put in HTML and you never quite know what it should be? Did you ever get an email from your friends in Bulgaria with the subject line &quot;???? ?????? ??? ????&quot;? I&#39;ve been dismayed to discover just how many software developers…">

<!-- Jetpack Open Graph Tags -->
<meta property="og:type" content="article">
<meta property="og:title" content="The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)">
<meta property="og:url" content="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/">
<meta property="og:description" content="Ever wonder about that mysterious Content-Type tag? You know, the one you’re supposed to put in HTML and you never quite know what it should be? Did you ever get an email from your friends in…">
<meta property="article:published_time" content="2003-10-08T00:15:12+00:00">
<meta property="article:modified_time" content="2017-11-17T21:42:17+00:00">
<meta property="og:site_name" content="Joel on Software">
<meta property="og:image" content="https://149366100.v2.pressablecdn.com/wp-content/uploads/2003/10/rose.jpg">
<meta property="og:image:width" content="300">
<meta property="og:image:height" content="225">
<meta property="og:locale" content="en_US">
<meta name="twitter:text:title" content="The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)">
<meta name="twitter:image" content="https://149366100.v2.pressablecdn.com/wp-content/uploads/2003/10/ascii.png?w=144">
<meta name="twitter:image:alt" content="ASCII table">
<meta name="twitter:card" content="summary">

<!-- End Jetpack Open Graph Tags -->
<link rel="icon" href="https://i0.wp.com/www.joelonsoftware.com/wp-content/uploads/2016/12/11969842.jpg?fit=32%2C32&amp;ssl=1" sizes="32x32">
<link rel="icon" href="https://i0.wp.com/www.joelonsoftware.com/wp-content/uploads/2016/12/11969842.jpg?fit=192%2C192&amp;ssl=1" sizes="192x192">
<link rel="apple-touch-icon" href="https://i0.wp.com/www.joelonsoftware.com/wp-content/uploads/2016/12/11969842.jpg?fit=180%2C180&amp;ssl=1">
<meta name="msapplication-TileImage" content="https://i0.wp.com/www.joelonsoftware.com/wp-content/uploads/2016/12/11969842.jpg?fit=270%2C270&amp;ssl=1">
			<style type="text/css" id="wp-custom-css">
				/*
Welcome to Custom CSS!

To learn how this works, see http://wp.me/PEmnE-Bt
*/
/* Joel Test Div */
.joel-test {
	border: 1px solid rgba(0,0,0,0.2);
	box-shadow: 5px 5px 5px rgba(0,0,0,0.2);
	-moz-box-shadow: 5px 5px 5px rgba(0,0,0,0.2);
	-webkit-box-shadow: 5px 5px 5px rgba(0,0,0,0.2);
	font-size: 16px;
	margin: 2.5em auto;
	max-width: 400px;
	padding: 10px;
}

.joel-test-title {
	font-size: 25px;
	font-weight: 700;
	text-align: center;
}			</style>
		<style id="fit-vids-style">.fluid-width-video-wrapper{width:100%;position:relative;padding:0;}.fluid-width-video-wrapper iframe,.fluid-width-video-wrapper object,.fluid-width-video-wrapper embed {position:absolute;top:0;left:0;width:100%;height:100%;}</style><script charset="utf-8" src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/moment_timeline_tweet.2e5232162202896d50461b242819754e.js"></script><script charset="utf-8" src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/timeline.610564c46865d0bb1eccdd42c0dc6ea7.js"></script></head>

<body class="post-template-default single single-post postid-911 single-format-standard"><div id="StayFocusd-infobar" style="display: none; top: 560px;">
    <img src="chrome-extension://laankejkbhbdhmipfmgcngdelahlfoji/common/img/eye_19x19_red.png">
    <span id="StayFocusd-infobar-msg"></span>
    <span id="StayFocusd-infobar-links">
        <a id="StayFocusd-infobar-never-show">hide forever</a>&nbsp;&nbsp;|&nbsp;&nbsp;
        <a id="StayFocusd-infobar-hide">hide once</a>
    </span>
</div>


<div id="page" class="hfeed site container">

	<a class="skip-link screen-reader-text" href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/#content">Skip to content</a>

	<!-- Get sidebar color option (Appearance -> Customize -> Theme Options) -->
		<header id="masthead" class="site-header light" role="banner">
		<!-- Tab navigation -->
		<ul class="toggle-bar" role="tablist">
			<!-- Main navigation -->
			<li id="panel-1" class="current" role="presentation">
				<a href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/#tab-1" role="tab" aria-controls="tab-1" aria-selected="true" class="nav-toggle current" data-tab="tab-1"><i class="fa fa-bars"></i><span class="screen-reader-text">View menu</span></a>
			</li>

			<!-- Featured Posts navigation -->
			
			<!-- Sidebar widgets navigation -->
			<li id="panel-3" role="presentation">
				<a href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/#tab-3" role="tab" aria-controls="tab-3" aria-selected="false" class="folder-toggle" data-tab="tab-3"><i class="fa fa-folder" style="display: inline-block;"></i><i class="fa fa-folder-open" style="display: none;"></i><span class="screen-reader-text">View sidebar</span></a>
			</li>
		</ul>

		<div id="tabs" class="toggle-tabs">
			<div class="site-header-inside">
				<!-- Logo, description and main navigation -->
				<div id="tab-1" class="tab-content fadeIn current">
					<div class="site-branding">
						<!-- Get the site branding -->
													<h1 class="site-title"><a href="https://www.joelonsoftware.com/" rel="home">Joel on Software</a></h1>
							<h2 class="site-description"></h2>
											</div>

					<nav id="site-navigation" class="main-navigation" role="navigation" style="display: block;">
											</nav><!-- #site-navigation -->

					
					<div id="front-widgets" class="widget-area" role="complementary">

	<aside id="text-3" class="widget widget_text"><h2 class="widget-title">Your host</h2>			<div class="textwidget"><a href="https://www.joelonsoftware.com/about-me/"><img src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/Pong.png" notsrc="https://149366100.v2.pressablecdn.com/wp-content/uploads/2016/12/11969842-1.jpg" width="202" height="401"></a><p>I’m Joel Spolsky, a software developer in New York City. <a href="https://www.joelonsoftware.com/about-me/">More about me</a>.</p>
</div>
		</aside>
</div><!-- #front-widgets -->

				</div><!-- #tab-1 -->

				<!-- Featured Posts template (template-featured-posts.php) -->
				
				<!-- Sidebar widgets -->
				<div id="tab-3" class="tab-content animated fadeIn" role="tabpanel" aria-labelledby="panel-3" aria-hidden="true">
					<div id="secondary" class="widget-area" role="complementary">

	<aside id="search-3" class="widget widget_search">
<form role="search" method="get" class="search-form" action="https://www.joelonsoftware.com/search-results/" id="cse-search-box" data-children-count="1">
	<div>
		<input type="hidden" name="cx" value="004631902266951669168:g9jvyociwrg">
		<input type="hidden" name="ie" value="UTF-8">
	</div>
	<input type="search" class="search-field" placeholder="Search …" value="" name="q" title="Search for:">
	
	<input type="submit" class="search-submit" name="sa"><span class="screen-reader-text">Search</span>
</form>
</aside><aside id="text-2" class="widget widget_text">			<div class="textwidget"><img src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/newdesign-books.png" style="float: left; margin-right: 15px;" width="42" height="100">Read the archives in dead-tree format! Many of these articles have been collected into <a href="https://www.joelonsoftware.com/buy-the-books/">four books</a>, available at your favorite bookstore. It’s an excellent way to read the site in the bath, or throw it at your boss.</div>
		</aside><aside id="text-4" class="widget widget_text"><h2 class="widget-title">Careers</h2>			<div class="textwidget"><p><img src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/jobs.jpg" width="215" height="223"></p>
<p>Ready to level up? <a href="http://stackoverflow.com/jobs">Stack Overflow Jobs</a> is the job site that puts the needs of developers first. Whether you want to take control of your search or <a href="http://stackoverflow.com/jobs/why-jobs">let employers discover you</a>, we’re on a mission to help every developer find a job they love.</p>
<p>Looking to hire smart programmers who get things done? <a href="https://www.stackoverflowbusiness.com/talent">Stack Overflow Talent</a> is a fully-customized sourcing solution that helps you understand, reach, and attract developers on the platform they trust most. Find the right candidates for your jobs. <a href="https://www.stackoverflowbusiness.com/talent/request-a-demo?utm_source=joelonsoftware&amp;utm_medium=referral&amp;utm_term=learn-more">Learn more.</a></p>
</div>
		</aside><aside id="text-6" class="widget widget_text">			<div class="textwidget"><p><a href="http://stackoverflow.com/"><img src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/so-logo.png" width="730" height="173"></a></p>
<p>For my day job, I'm the co-founder and CEO of <a href="http://stackoverflow.com/">Stack Overflow</a>, the largest online community for programmers to learn, share their knowledge, and level up. Each month, more than 40 million professional and aspiring programmers visit Stack Overflow to ask and answer questions and find better jobs. Stack Overflow is also the flagship site of the <a href="http://stackexchange.com/">Stack Exchange network</a>, 160+ question and answer sites dedicated to all kinds of topics from cooking to gaming. According to Quantcast, Stack Overflow is the 30th largest web property in the United States and in the top 100 in the world.<br>
<a href="https://stackoverflow.com/users/story/4"><br>
<img src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/4.png" width="208" height="58" alt="profile for Joel Spolsky on Stack Exchange, a network of free, community-driven Q&amp;A sites" title="profile for Joel Spolsky on Stack Exchange, a network of free, community-driven Q&amp;A sites"><br>
</a></p>
</div>
		</aside><aside id="text-7" class="widget widget_text">			<div class="textwidget"><p><a href="http://fogcreek.com/"><img src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/fc-logo.png" width="412" height="93"></a><br>
I also founded <a href="http://fogcreek.com/">Fog Creek Software</a>, one of the most influential small tech companies in the world. As an independent, privately-owned company, we’ve been making customers happy since the turn of the century. We share what we've learned about how to make great software, both by writing about our ideas and by creating products, like <a href="http://www.fogcreek.com/fogbugz">FogBugz</a>, <a href="http://trello.com/">Trello</a> and <a href="https://gomix.com/">Gomix</a>, that help others make great technology. As a result, Fog Creek's impact on the world of developers rivals companies a thousand times our size.</p>
</div>
		</aside><aside id="twitter_timeline-4" class="widget widget_twitter_timeline"><h2 class="widget-title">Twitter! Twitter!</h2><iframe id="twitter-widget-0" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true" class="twitter-timeline twitter-timeline-rendered" style="position: static; visibility: visible; display: inline-block; width: 100%; height: 307.828px; padding: 0px; border: none; max-width: 100%; min-width: 180px; margin-top: 0px; margin-bottom: 0px;" data-widget-id="profile:spolsky" title="Twitter Timeline" src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/saved_resource.html"></iframe></aside>
</div><!-- #secondary -->
				</div><!-- #tab-3 -->
			</div><!-- .site-header-inside -->
		</div><!-- #tabs -->
	</header><!-- #masthead -->
	<div id="content" class="site-content fadeInFast">

	<div id="primary" class="content-area">
		<main id="main" class="site-main" role="main">

		
			
<article id="post-911" class="post post-911 type-post status-publish format-standard hentry category-top-10 category-new-developer category-news">
	<!-- Grab the featured image -->
	
	<header class="entry-header">
				<div class="entry-date">
			<span class="posted-on"><a href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/" rel="bookmark"><time class="entry-date published" datetime="2003-10-08T00:15:12+00:00">October 8, 2003</time><time class="updated" datetime="2017-11-17T21:42:17+00:00">November 17, 2017</time></a></span><span class="byline"> by </span> <span class="author vcard"><a class="url fn n" href="https://www.joelonsoftware.com/author/joelonsoftware/">Joel Spolsky</a></span>		</div><!-- .entry-meta -->
		
		<h1 class="entry-title">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!)</h1>	</header><!-- .entry-header -->

	
<div class="entry-meta">

	<ul class="meta-list">
					<li class="meta-cat"><a href="https://www.joelonsoftware.com/category/reading-lists/top-10/" rel="category tag">Top 10</a>, <a href="https://www.joelonsoftware.com/category/reading-lists/new-developer/" rel="category tag">New developer</a>, <a href="https://www.joelonsoftware.com/category/news/" rel="category tag">News</a></li>
									</ul>
</div>

	<div class="entry-content">
		<p>Ever wonder about that mysterious Content-Type tag? You know, the one you’re supposed to put in HTML and you never quite know what it should be?</p>
<p>Did you ever get an email from your friends in Bulgaria with the subject line “???? ?????? ??? ????”?</p>
<p><img loading="lazy" style="margin-left: 5px;" src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/ibm.jpg" alt="" width="150" height="143" align="right" border="0" data-recalc-dims="1">I’ve been dismayed to discover just how many software developers aren’t really completely up to speed on the mysterious world of character sets, encodings, Unicode, all that stuff. A couple of years ago, a beta tester for <a href="http://www.fogcreek.com/FogBUGZ">FogBUGZ</a> was wondering whether it could handle incoming email in Japanese. Japanese? They have email in Japanese? I had no idea. When I looked closely at the commercial ActiveX control we were using to parse MIME email messages, we discovered it was doing exactly the wrong thing with character sets, so we actually had to write heroic code to undo the wrong conversion it had done and redo it correctly. When I looked into another commercial library, it, too, had a completely broken character code implementation. I corresponded with the developer of that package and he sort of thought they “couldn’t do anything about it.” Like many programmers, he just wished it would all blow over somehow.</p>
<p>But it won’t. When I discovered that the popular web development tool PHP has almost <a href="http://ca3.php.net/manual/en/language.types.string.php">complete ignorance of character encoding issues</a>, blithely using 8 bits for characters, making it darn near impossible to develop good international web applications, I thought, <em>enough is enough</em>.</p>
<p>So I have an announcement to make: if you are a programmer working in 2003 and you don’t know the basics of characters, character sets, encodings, and Unicode, and I <em>catch</em> you, I’m going to punish you by making you peel onions for 6 months in a submarine. I swear I will.</p>
<p>And one more thing:</p>
<p align="center"><strong>IT’S NOT THAT HARD.</strong></p>
<p align="left">In this article I’ll fill you in on exactly what <em>every working programmer</em> should know. All that stuff about “plain text = ascii = characters are 8 bits” is not only wrong, it’s hopelessly wrong, and if you’re still programming that way, you’re not much better than a medical doctor who doesn’t believe in germs. Please do not write another line of code until you finish reading this article.</p>
<p align="left">Before I get started, I should warn you that if you are one of those rare people who knows about internationalization, you are going to find my entire discussion a little bit oversimplified. I’m really just trying to set a minimum bar here so that everyone can understand what’s going on and can write code that has a <em>hope</em> of working with text in any language other than the subset of English that doesn’t include words with accents. And I should warn you that character handling is only a tiny portion of what it takes to create software that works internationally, but I can only write about one thing at a time so today it’s character sets.</p>
<p><strong><span style="font-size: large;">A Historical Perspective</span></strong></p>
<p>The easiest way to understand this stuff is to go chronologically.</p>
<p>You probably think I’m going to talk about very old character sets like EBCDIC here. Well, I won’t. EBCDIC is not relevant to your life. We don’t have to go that far back in time.</p>
<p><img loading="lazy" style="margin-left: 5px;" src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/ascii.png" alt="ASCII table" width="274" height="146" align="right" border="0" data-recalc-dims="1">Back in the semi-olden days, when Unix was being invented and K&amp;R were writing <a href="http://cm.bell-labs.com/cm/cs/cbook/">The C Programming Language</a>, everything was very simple. EBCDIC was on its way out. The only characters that mattered were good old unaccented English letters, and we had a code for them called <a href="http://www.robelle.com/library/smugbook/ascii.html">ASCII</a> which was able to represent every character using a number between 32 and 127. Space was 32, the letter “A” was 65, etc. This could conveniently be stored in 7 bits. Most computers in those days were using 8-bit bytes, so not only could you store every possible ASCII character, but you had a whole bit to spare, which, if you were wicked, you could use for your own devious purposes: the dim bulbs at WordStar actually turned on the high bit to indicate the last letter in a word, condemning WordStar to English text only. Codes below 32 were called <em>unprintable</em> and were used for cussing. Just kidding. They were used for control characters, like 7 which made your computer beep and 12 which caused the current page of paper to go flying out of the printer and a new one to be fed in.</p>
<p>And all was good, assuming you were an English speaker.</p>
<p><img loading="lazy" style="margin-left: 5px;" src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/oem.png" alt="" width="271" height="209" align="right" border="0" data-recalc-dims="1">Because bytes have room for up to eight bits, lots of people got to thinking, “gosh, we can use the codes 128-255 for our own purposes.” The trouble was, <em>lots</em> of people had this idea at the same time, and they had their own ideas of what should go where in the space from 128 to 255. The IBM-PC had something that came to be known as the OEM character set which provided some accented characters for European languages and <a href="http://www.jimprice.com/ascii-dos.gif">a bunch of line drawing characters</a>… horizontal bars, vertical bars, horizontal bars with little dingle-dangles dangling off the right side, etc., and you could use these line drawing characters to make spiffy boxes and lines on the screen, which you can still see running on the 8088 computer at your dry cleaners’. In fact&nbsp; as soon as people started buying PCs outside of America all kinds of different OEM character sets were dreamed up, which all used the top 128 characters for their own purposes. For example on some PCs the character code 130 would display as é, but on computers sold in Israel it was the Hebrew letter Gimel (<img loading="lazy" src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/gimel.png" alt="ג" width="5" height="9" border="0" data-recalc-dims="1">), so when Americans would send their résumés to Israel they would arrive as r<img loading="lazy" style="margin-right: 2px;" src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/gimel.png" alt="ג" width="5" height="9" border="0" data-recalc-dims="1">sum<img loading="lazy" style="margin-right: 2px;" src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/gimel.png" alt="ג" width="5" height="9" border="0" data-recalc-dims="1">s. In many cases, such as Russian, there were lots of different ideas of what to do with the upper-128 characters, so you couldn’t even reliably interchange Russian documents.</p>
<p>Eventually this OEM free-for-all got codified in the ANSI standard. In the ANSI standard, everybody agreed on what to do below 128, which was pretty much the same as ASCII, but there were lots of different ways to handle the characters from 128 and on up, depending on where you lived. These different systems were called <em><a href="http://www.i18nguy.com/unicode/codepages.html#msftdos">code pages</a></em>. So for example in Israel DOS used a code page called 862, while Greek users used 737. They were the same below 128 but different from 128 up, where all the funny letters resided. The national versions of MS-DOS had dozens of these code pages, handling everything from English to Icelandic and they even had a few “multilingual” code pages that could do Esperanto and Galician <em>on the same computer! Wow!</em> But getting, say, Hebrew and Greek on the same computer was a complete impossibility unless you wrote your own custom program that displayed everything using bitmapped graphics, because Hebrew and Greek required different code pages with different interpretations of the high numbers.</p>
<p>Meanwhile, in Asia, even more crazy things were going on to take into account the fact that Asian alphabets have thousands of letters, which were never going to fit into 8 bits. This was usually solved by the messy system called DBCS, the “double byte character set” in which <em>some</em> letters were stored in one byte and others took two. It was easy to move forward in a string, but dang near impossible to move backwards. Programmers were encouraged not to use s++ and s– to move backwards and forwards, but instead to call functions such as Windows’ AnsiNext and AnsiPrev which knew how to deal with the whole mess.</p>
<p>But still, most people just pretended that a byte was a character and a character was 8 bits and as long as you never moved a string from one computer to another, or spoke more than one language, it would sort of always work. But of course, as soon as the Internet happened, it became quite commonplace to move strings from one computer to another, and the whole mess came tumbling down. Luckily, Unicode had been invented.</p>
<p><strong><span style="font-size: large;">Unicode</span></strong></p>
<p>Unicode was a brave effort to create a single character set that included every reasonable writing system on the planet and some make-believe ones like Klingon, too. Some people are under the misconception that Unicode is simply a 16-bit code where each character takes 16 bits and therefore there are 65,536 possible characters. <strong>This is not, actually, correct.</strong> It is the single most common myth about Unicode, so if you thought that, don’t feel bad.</p>
<p>In fact, Unicode has a different way of thinking about characters, and you have to understand the Unicode way of thinking of things or nothing will make sense.</p>
<p>Until now, we’ve assumed that a letter maps to some bits which you can store on disk or in memory:</p>
<p>A -&gt; 0100 0001</p>
<p>In Unicode, a letter maps to something called a <em>code point</em> which is still just a theoretical concept. How that code point is represented in memory or on disk is a whole nuther story.</p>
<p>In Unicode, the letter A is a platonic ideal. It’s just floating in heaven:</p>
<p align="center"><span style="font-size: xx-large;">A</span></p>
<p>This platonic <span style="font-size: xx-large;">A</span> is different than <span style="font-size: xx-large;">B</span>, and different from <span style="font-size: xx-large;">a</span>, but the same as <span style="font-family: arial, helvetica, &#39;sans serif&#39;; font-size: xx-large;">A</span> and <i><b><span style="font-size: xx-large;">A</span></b></i> and A. The idea that A in a Times New Roman font is the same character as the A in a Helvetica font, but <em>different</em> from “a” in lower case, does not seem very controversial, but in some languages just figuring out what a letter <em>is</em> can cause controversy. Is the German letter ß a real letter or just a fancy way of writing ss? If a letter’s shape changes at the end of the word, is that a different letter? Hebrew says yes, Arabic says no. Anyway, the smart people at the Unicode consortium have been figuring this out for the last decade or so, accompanied by a great deal of highly political debate, and you don’t have to worry about it. They’ve figured it all out already.</p>
<p>Every platonic letter in every alphabet is assigned a magic number by the Unicode consortium which is written like this: <strong>U+0639</strong>.&nbsp; This magic number is called a <em>code point</em>. The U+ means “Unicode” and the numbers are hexadecimal. <strong>U+0639</strong> is the Arabic letter Ain. The English letter A would be <strong>U+0041</strong>. You can find them all using the <strong>charmap</strong> utility on Windows 2000/XP or visiting <a href="http://www.unicode.org/">the Unicode web site</a>.</p>
<p>There is no real limit on the number of letters that Unicode can define and in fact they have gone beyond 65,536 so not every unicode letter can really be squeezed into two bytes, but that was a myth anyway.</p>
<p>OK, so say we have a string:</p>
<p align="center"><strong>Hello</strong></p>
<p>which, in Unicode, corresponds to these five code points:</p>
<p align="center">U+0048 U+0065 U+006C U+006C U+006F.</p>
<p>Just a bunch of code points. Numbers, really. We haven’t yet said anything about how to store this in memory or represent it in an email message.</p>
<p><strong><span style="font-size: large;">Encodings</span></strong></p>
<p>That’s where <em>encodings</em> come in.</p>
<p>The earliest idea for Unicode encoding, which led to the myth about the two bytes, was, hey, let’s just store those numbers in two bytes each. So Hello becomes</p>
<p align="center">00 48 00 65 00 6C 00 6C 00 6F</p>
<p>Right? Not so fast! Couldn’t it also be:</p>
<p align="center">48 00 65 00 6C 00 6C 00 6F 00 ?</p>
<p>Well, technically, yes, I do believe it could, and, in fact, early implementors wanted to be able to store their Unicode code points in high-endian or low-endian mode, whichever their particular CPU was fastest at, and lo, it was evening and it was morning and there were already <em>two</em> ways to store Unicode. So the people were forced to come up with the bizarre convention of storing a FE FF at the beginning of every Unicode string; this is called a <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/intl/unicode_42jv.asp">Unicode Byte Order Mark</a> and if you are swapping your high and low bytes it will look like a FF FE and the person reading your string will know that they have to swap every other byte. Phew. Not every Unicode string in the wild has a byte order mark at the beginning.</p>
<p align="center"><img loading="lazy" src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/hummers.jpg" alt="" width="390" height="61" border="0" data-recalc-dims="1"></p>
<p>For a while it seemed like that might be good enough, but programmers were complaining. “Look at all those zeros!” they said, since they were Americans and they were looking at English text which rarely used code points above U+00FF. Also they were liberal hippies in California who wanted to <em>conserve (sneer)</em>. If they were Texans they wouldn’t have minded guzzling twice the number of bytes. But those Californian wimps couldn’t bear the idea of <em>doubling</em> the amount of storage it took for strings, and anyway, there were already all these doggone documents out there using various ANSI and DBCS character sets and who’s going to convert them all? <em>Moi?</em> For this reason alone most people decided to ignore Unicode for several years and in the meantime things got worse.</p>
<p>Thus was <a href="http://www.cl.cam.ac.uk/~mgk25/ucs/utf-8-history.txt">invented</a>&nbsp;the brilliant concept of <a href="http://www.utf-8.com/">UTF-8</a>. UTF-8 was another system for storing your string of Unicode code points, those magic U+ numbers, in memory using 8 bit bytes. In UTF-8, every code point from 0-127 is stored <em>in a single byte</em>. Only code points 128 and above are stored using 2, 3, in fact, up to 6 bytes.</p>
<p align="center"><img loading="lazy" src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/utf8.png" alt="How UTF-8 works" width="400" height="63" border="1" data-recalc-dims="1"></p>
<p>This has the neat side effect that English text looks <em>exactly the same in UTF-8 as it did in ASCII,</em> so Americans don’t even notice anything wrong. Only the rest of the world has to jump through hoops. Specifically, <strong>Hello</strong>, which was U+0048 U+0065 U+006C U+006C U+006F, will be stored as 48 65 6C 6C 6F, which, behold! is the same as it was stored in ASCII, and ANSI, and every OEM character set on the planet. Now, if you are so bold as to use accented letters or Greek letters or Klingon letters, you’ll have to use several bytes to store a single code point, but the Americans will never notice. (UTF-8 also has the nice property that ignorant old string-processing code that wants to use a single 0 byte as the null-terminator will not truncate strings).</p>
<p>So far I’ve told you <em>three</em> ways of encoding Unicode. The traditional store-it-in-two-byte methods are called UCS-2 (because it has two bytes) or UTF-16 (because it has 16 bits), and you still have to figure out if it’s high-endian UCS-2 or low-endian UCS-2. And there’s the popular new UTF-8 <a href="http://www.zvon.org/tmRFC/RFC2279/Output/chapter2.html">standard</a> which has the nice property of also working respectably if you have the happy coincidence of English text and braindead programs that are completely unaware that there is anything other than ASCII.</p>
<p>There are actually a bunch of other ways of encoding Unicode. There’s something called UTF-7, which is a lot like UTF-8 but guarantees that the high bit will always be zero, so that if you have to pass Unicode through some kind of draconian police-state email system that thinks 7 bits are <em>quite enough, thank you</em> it can still squeeze through unscathed. There’s UCS-4, which stores each code point in 4 bytes, which has the nice property that every single code point can be stored in the same number of bytes, but, golly, even the Texans wouldn’t be so bold as to waste <em>that</em> much memory.</p>
<p>And in fact now that you’re thinking of things in terms of platonic ideal letters which are represented by Unicode code points, those unicode code points can be encoded in any old-school encoding scheme, too! For example, you could encode the Unicode string for Hello (U+0048 U+0065 U+006C U+006C U+006F) in ASCII, or the old OEM Greek Encoding, or the Hebrew ANSI Encoding, or any of several hundred encodings that have been invented so far, <em>with one catch:</em> some of the letters might not show up! If there’s no equivalent for the Unicode code point you’re trying to represent in the encoding you’re trying to represent it in, you usually get a little question mark: ? or, if you’re <em>really</em> good, a box. Which did you get? -&gt; �</p>
<p>There are hundreds of traditional encodings which can only store <em>some</em> code points correctly and change all the other code points into question marks. Some popular encodings of English text are Windows-1252 (the Windows 9x standard for Western European languages) and&nbsp;<a href="http://www.htmlhelp.com/reference/charset/">ISO-8859-1</a>, aka Latin-1 (also useful for any Western European language). But try to store Russian or Hebrew letters in these encodings and you get a bunch of question marks. UTF 7, 8, 16, and 32 all have the nice property of being able to store <em>any</em> code point correctly.</p>
<p><strong><span style="font-size: large;">The Single Most Important Fact About Encodings</span></strong></p>
<p>If you completely forget everything I just explained, please remember one extremely important fact. <strong>It does not make sense to have a string without knowing what encoding it uses</strong>. You can no longer stick your head in the sand and pretend that “plain” text is ASCII.</p>
<p align="center"><strong><u>There Ain’t No Such Thing As Plain Text.</u></strong></p>
<p>If you have a string, in memory, in a file, or in an email message, you have to know what encoding it is in or you cannot interpret it or display it to users correctly.</p>
<p>Almost every stupid “my website looks like gibberish” or “she can’t read my emails when I use accents” problem comes down to one naive programmer who didn’t understand the simple fact that if you don’t tell me whether a particular string is encoded using UTF-8 or ASCII or ISO 8859-1 (Latin 1) or Windows 1252 (Western European), you simply cannot display it correctly or even figure out where it ends. There are over a hundred encodings and above code point 127, all bets are off.</p>
<p>How do we preserve this information about what encoding a string uses? Well, there are standard ways to do this. For an email message, you are expected to have a string in the header of the form</p>
<blockquote dir="ltr" style="margin-right: 0px;"><p><strong>Content-Type: text/plain;&nbsp;charset="UTF-8"</strong></p></blockquote>
<p>For a web page, the original idea was that the web server would return a similar <strong>Content-Type</strong> http header along with the web page itself — not in the HTML itself, but as one of the response headers that are sent before the HTML page.</p>
<p>This causes problems. Suppose you have a big web server with lots of sites and hundreds of pages contributed by lots of people in lots of different languages and all using whatever encoding their copy of Microsoft FrontPage saw fit to generate. The web server itself wouldn’t really <em>know</em> what encoding each file was written in, so it couldn’t send the Content-Type header.</p>
<p>It would be convenient if you could put the Content-Type of the HTML file right in the HTML file itself, using some kind of special tag. Of course this drove purists crazy… how can you <em>read</em> the HTML file until you know what encoding it’s in?! Luckily, almost every encoding in common use does the same thing with characters between 32 and 127, so you can always get this far on the HTML page without starting to use funny letters:</p>
<blockquote dir="ltr" style="margin-right: 0px;"><p><strong>&lt;html&gt;<br>
&lt;head&gt;<br>
<!--StartFragment --></strong><strong>&lt;<span class="start-tag">meta</span> <span class="attribute-name">http-equiv</span>=<span class="attribute-value">"Content-Type"</span> <span class="attribute-name">content</span>=<span class="attribute-value">"text/html; charset=utf-8"</span>&gt;</strong></p></blockquote>
<p>But that meta tag really has to be the very first thing in the &lt;head&gt; section because as soon as the web browser sees this tag it’s going to stop parsing the page and start over after reinterpreting the whole page using the encoding you specified.</p>
<p>What do web browsers do if they don’t find any Content-Type, either in the http headers or the meta tag? Internet Explorer actually does something quite interesting: it tries to guess, based on the frequency in which various bytes appear in typical text in typical encodings of various languages, what language and encoding was used. Because the various old 8 bit code pages tended to put their national letters in different ranges between 128 and 255, and because every human language has a different characteristic histogram of letter usage, this actually has a chance of working. It’s truly weird, but it does seem to work often enough that naïve web-page writers who never knew they needed a Content-Type header look at their page in a web browser and it <em>looks ok</em>, until one day, they write something that doesn’t exactly conform to the letter-frequency-distribution of their native language, and Internet Explorer decides it’s Korean and displays it thusly, proving, I think, the point that Postel’s Law about being “conservative in what you emit and liberal in what you accept” is quite frankly not a good engineering principle. Anyway, what does the poor reader of this website, which was written in Bulgarian but appears to be Korean (and not even cohesive Korean), do? He uses the View | Encoding menu and tries a bunch of different encodings (there are at least a dozen for Eastern European languages) until the picture comes in clearer. If he knew to do that, which most people don’t.</p>
<p align="center"><img loading="lazy" src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/rose.jpg" alt="" width="300" height="225" border="0" data-recalc-dims="1"></p>
<p>For the latest version of <a href="http://www.fogcreek.com/CityDesk">CityDesk</a>, the web site management software published by <a href="http://www.fogcreek.com/">my company</a>, we decided to do everything internally in UCS-2 (two byte) Unicode, which is what Visual Basic, COM, and Windows NT/2000/XP use as their native string type. In C++ code we just declare strings as <strong>wchar_t</strong> (“wide char”) instead of <strong>char</strong> and use the <strong>wcs</strong> functions instead of the <strong>str</strong> functions (for example <strong>wcscat</strong> and <strong>wcslen</strong> instead of <strong>strcat</strong> and <strong>strlen</strong>). To create a literal UCS-2 string in C code you just put an L before it as so: <strong>L"Hello"</strong>.</p>
<p>When CityDesk publishes the web page, it converts it to UTF-8 encoding, which has been well supported by web browsers for many years. That’s the way all <a href="https://www.joelonsoftware.com/navLinks/OtherLanguages.html">29 language versions</a> of <em>Joel on Software</em> are encoded and I have not yet heard a single person who has had any trouble viewing them.</p>
<p>This article is getting rather long, and I can’t possibly cover everything there is to know about character encodings and Unicode, but I hope that if you’ve read this far, you know enough to go back to programming, using antibiotics instead of leeches and spells, a task to which I will leave you now.</p>
			</div><!-- .entry-content -->

</article><!-- #post-## -->



	<div id="post-footer-widgets" class="widget-area" role="complementary">

	<aside id="text-8" class="widget widget_text"><h2 class="widget-title">Subscribe!</h2>			<div class="textwidget"><p>You’re reading <a href="https://www.joelonsoftware.com/">Joel on Software</a>, stuffed with years and years of completely raving mad articles about software development, managing software teams, designing user interfaces, running successful software companies, and rubber duckies.</p>
<p>If you want to know when I publish something new, I recommend getting an RSS reader like <a href="https://newsblur.com/">NewsBlur</a> and subscribing to my <a href="https://www.joelonsoftware.com/feed/">RSS feed</a>.</p>
</div>
		</aside>
</div><!-- #post-footer-widgets -->

<div class="author-info">
	<div class="author-avatar">
		<img alt="" src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/d95216e70bed7430716b91ddd6df55fe.jpeg" srcset="https://secure.gravatar.com/avatar/d95216e70bed7430716b91ddd6df55fe?s=128&amp;d=mm&amp;r=pg 2x" class="avatar avatar-64 photo" height="64" width="64" loading="lazy">	</div><!-- .author-avatar -->

	<div class="author-description">
		<h2 class="author-title"><span class="author-heading">About the author.</span></h2>

		<p class="author-bio">
			In 2000 I co-founded Fog Creek Software, where we created lots of cool things like the FogBugz bug tracker, Trello, and Glitch. I also worked with Jeff Atwood to create Stack Overflow and served as CEO of Stack Overflow from 2010-2019.

Today I serve as the chairman of the board for <a href="https://stackoverflow.com/">Stack Overflow</a>, <a href="https://glitch.com/">Glitch</a>, and <a href="https://hash.ai/">HASH</a>.		</p><!-- .author-bio -->
	</div><!-- .author-description -->
</div><!-- .author-info -->

				<nav class="navigation post-navigation" role="navigation">
		<h1 class="screen-reader-text">Post navigation</h1>
		<div class="nav-links">
			<div class="nav-previous"><a href="https://www.joelonsoftware.com/2003/10/01/01-3/" rel="prev"><span class="meta-nav">← Previous Post</span> 01</a></div><div class="nav-next"><a href="https://www.joelonsoftware.com/2003/10/10/10/" rel="next"><span class="meta-nav">Next Post →</span> 10</a></div>		</div><!-- .nav-links -->
	</nav><!-- .navigation -->
		
			
		
		</main><!-- #main -->
	</div><!-- #primary -->

	</div><!-- #content -->

	<footer id="colophon" class="site-footer" role="contentinfo">
		<div class="site-info">
			<a class="powered-by" href="https://wordpress.org/">
				Proudly powered by WordPress			</a>
		</div><!-- .site-info -->
	</footer><!-- #colophon -->
</div><!-- #page -->

	<div style="display:none">
	<div class="grofile-hash-map-d95216e70bed7430716b91ddd6df55fe">
	</div>
	</div>
<script type="text/javascript" src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/photon.min.js" id="jetpack-photon-js"></script>
<script type="text/javascript" src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/jquery.fitvids.js" id="fitvids-js"></script>
<script type="text/javascript" src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/editor.js" id="editor-js-js"></script>
<script type="text/javascript" src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/twitter-timeline.min.js" id="jetpack-twitter-timeline-js"></script>
<script type="text/javascript" src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/wp-embed.min.js" id="wp-embed-js"></script>
		<script type="text/javascript">
			(function() {
			var t   = document.createElement( 'script' );
			t.type  = 'text/javascript';
			t.async = true;
			t.id    = 'gauges-tracker';
			t.setAttribute( 'data-site-id', '57a9715ec88d90063f018386' );
			t.src = '//secure.gaug.es/track.js';
			var s = document.getElementsByTagName( 'script' )[0];
			s.parentNode.insertBefore( t, s );
			})();
		</script>
		<script type="text/javascript" src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/e-202038.js" async="async" defer="defer"></script>
<script type="text/javascript">
	_stq = window._stq || [];
	_stq.push([ 'view', {v:'ext',j:'1:8.9.1',blog:'119105578',post:'911',tz:'0',srv:'www.joelonsoftware.com'} ]);
	_stq.push([ 'clickTrackerInit', '119105578', '911' ]);
</script>



<!--
	generated 230 seconds ago
	generated in 0.758 seconds
	served from batcache in 0.002 seconds
	expires in 70 seconds
-->
<img src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/g.gif" alt=":)" width="6" height="5" id="wpstats"><iframe scrolling="no" frameborder="0" allowtransparency="true" src="./The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets (No Excuses!) – Joel on Software_files/widget_iframe.2d7d9a6d04538bf11c7b23641e75738c.html" title="Twitter settings iframe" style="display: none;"></iframe></body></html>